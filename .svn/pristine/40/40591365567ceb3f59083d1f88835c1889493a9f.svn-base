package com.ipc;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
 
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;



public class WriteXmlFileUtil {
	
	

	/**
	 * @param args
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 * 
	 * 
	 */
	public static void main(String[] args) throws FileNotFoundException, IOException {
		// TODO Auto-generated method stub
		DocumentBuilder dBuilder = null;
		try {
			 
			dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Document doc = dBuilder.newDocument();
			Element rootElement=doc.createElement(IpcPath.Export);
			//Read IPC properties
			FileInputStream fileInputStream = new FileInputStream(IpcPath.CONFIG_PRP_FILE);
			doc.appendChild(rootElement);
			Properties prop = new Properties();
			prop.load(fileInputStream);
			//Attribute
			Attr export_id = doc.createAttribute(IpcPath.export_id);
			export_id.setValue(prop.getProperty("export_id"));
			rootElement.setAttributeNode(export_id);
			
			//Attribute
			Attr notes = doc.createAttribute(IpcPath.Notes);
			notes.setValue(prop.getProperty("Notes"));
			rootElement.setAttributeNode(notes);
			//Attribute
			Attr version = doc.createAttribute(IpcPath.Version);
			version.setValue(prop.getProperty("Version"));
			rootElement.setAttributeNode(version);
			//Element
			Element table = doc.createElement(IpcPath.table);
			rootElement.appendChild(table);
			//Attribute
			Attr root = doc.createAttribute(IpcPath.Name);
			root.setValue(IpcPath.ClassIpc);
			table.setAttributeNode(root);
			
			
			File folder = new File(IpcPath.READ_XML);
			File[] listOfFiles = folder.listFiles();

			for (File file : listOfFiles) {
			    if (file.isFile()) {
			        
			        String fileName = file.getName();
			        
			        if(fileName.length() == 8 && fileName.toLowerCase().endsWith(".xml")) {
			        	
			        	ReadXmlFile readXMLFile = new ReadXmlFile();
						List<CfClassIpc> list =  readXMLFile.getIPCData(file.getAbsolutePath());
						
						for(CfClassIpc ipasRow: list)
							
						{
							
							//Element
							Element row = doc.createElement(IpcPath.Row);
							table.appendChild(row);
							//Attribute
							Attr lang = doc.createAttribute(IpcPath.Language);
							lang.setValue(ipasRow.getLanguage());
							rootElement.setAttributeNode(lang);
							// Class Element
							Element firstname = doc.createElement(IpcPath.Class);
							firstname.appendChild(doc.createTextNode(ipasRow.getClassCode()));
							row.appendChild(firstname);
							//Attribute
							Attr attr = doc.createAttribute(IpcPath.Type);
							attr.setValue(IpcPath.Character);
							firstname.setAttributeNode(attr);
							// Edition Element
							Element secondname = doc.createElement(IpcPath.Edition);
							secondname.appendChild(doc.createTextNode(ipasRow.getEditionCode()));
							row.appendChild(secondname);
							//Attribute
							Attr attr1 = doc.createAttribute(IpcPath.Type);
							attr1.setValue(IpcPath.Character);
							secondname.setAttributeNode(attr1);
							// Group Element
							Element thirdname = doc.createElement(IpcPath.Group);
							thirdname.appendChild(doc.createTextNode(ipasRow.getGroupCode()));
							row.appendChild(thirdname);
							//Attribute
							Attr attr2 = doc.createAttribute(IpcPath.Type);
							attr2.setValue(IpcPath.Character);
							thirdname.setAttributeNode(attr2);
							// Name Element
							Element fourname = doc.createElement(IpcPath.Name);
							fourname.appendChild(doc.createTextNode(ipasRow.getName()));
							row.appendChild(fourname);
							//Attribute
							Attr attr3 = doc.createAttribute(IpcPath.Type);
							attr3.setValue(IpcPath.Character);
							fourname.setAttributeNode(attr3);
							// Section Element
							Element fivename = doc.createElement(IpcPath.Section);
							fivename.appendChild(doc.createTextNode(ipasRow.getSectionCode()));
							row.appendChild(fivename);
							//Attribute
							Attr attr4 = doc.createAttribute(IpcPath.Type);
							attr4.setValue(IpcPath.Character);
							fivename.setAttributeNode(attr4);
							// Subclass Element
							Element sixname = doc.createElement(IpcPath.Subclass);
							sixname.appendChild(doc.createTextNode(ipasRow.getSubClassCode()));
							row.appendChild(sixname);
							//Attribute
							Attr attr5 = doc.createAttribute(IpcPath.Type);
							attr5.setValue(IpcPath.Character);
							sixname.setAttributeNode(attr5);
							// SubGroup Element
							Element sevenname = doc.createElement(IpcPath.SubGroup);
							sevenname.appendChild(doc.createTextNode(ipasRow.getSubGroupCode()));
							row.appendChild(sevenname);
							//Attribute
							Attr attr6 = doc.createAttribute(IpcPath.Type);
							attr6.setValue(IpcPath.Character);
							sevenname.setAttributeNode(attr6);
							// Row version Element
							Element eightname = doc.createElement(IpcPath.Rowver);
							eightname.appendChild(doc.createTextNode(ipasRow.getVersion()));
							row.appendChild(eightname);
							//Attribute
							Attr attr7 = doc.createAttribute(IpcPath.Type);
							attr7.setValue(IpcPath.Number);
							eightname.setAttributeNode(attr7);

							Transformer transformer = transformerFactory.newTransformer();
							transformer.setOutputProperty(OutputKeys.INDENT, "yes");
							DOMSource source = new DOMSource(doc);
							//WRITE XML file
							StreamResult result = new StreamResult(new File(IpcPath.WRITE_XML));
							transformer.transform(source, result);
			        }
			    }
			}
			
			
			
			
			}
			
	} catch (ParserConfigurationException pce) {
		pce.printStackTrace();
	  } catch (TransformerException tfe) {
		tfe.printStackTrace();
	  }
	}
	
}
